import os
import json
from pyrogram import filters
from pyrogram.types import Message
from config import OWNER_ID
from Safegram import Safegram

AUTHORIZED_USERS_FILE = "authorized_users.json"
AUTHORIZED_USERS = []

def load_authorized_users():
    if os.path.exists(AUTHORIZED_USERS_FILE):
        with open(AUTHORIZED_USERS_FILE, "r") as f:
            return json.load(f)
    return [OWNER_ID]

def save_authorized_users(users):
    with open(AUTHORIZED_USERS_FILE, "w") as f:
        json.dump(users, f)

AUTHORIZED_USERS = load_authorized_users()

@Safegram.on_message(filters.command("auth") & filters.user(OWNER_ID))
async def auth_user(_, message: Message):
    if len(message.command) != 2 or not message.command[1].isdigit():
        return await message.reply_text("‚ö†Ô∏è **·¥ús·¥Ä…¢·¥á:** `/auth <user_id>`", quote=True)

    user_id = int(message.command[1])
    if user_id in AUTHORIZED_USERS:
        await message.reply_text(f"üë§ **{user_id} …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö.**", quote=True)
    else:
        AUTHORIZED_USERS.append(user_id)
        save_authorized_users(AUTHORIZED_USERS)
        await message.reply_text(f"‚úÖ **{user_id}  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö.**", quote=True)

@Safegram.on_message(filters.command("unauth") & filters.user(OWNER_ID))
async def unauth_user(_, message: Message):
    if len(message.command) != 2 or not message.command[1].isdigit():
        return await message.reply_text("‚ö†Ô∏è **·¥ús·¥Ä…¢·¥á:** `/unauth <user_id>`", quote=True)

    user_id = int(message.command[1])
    if user_id in AUTHORIZED_USERS:
        AUTHORIZED_USERS.remove(user_id)
        save_authorized_users(AUTHORIZED_USERS)
        await message.reply_text(f"üö´ **{user_id}  ú·¥Äs  ô·¥á·¥á…¥  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ·¥õ Ä·¥è·¥ç ·¥Ä·¥ú·¥õ ú  ü…™s·¥õ.**", quote=True)
    else:
        await message.reply_text(f"‚ùå **{user_id} …™s …¥·¥è·¥õ ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö.**", quote=True)

@Safegram.on_message(filters.command("listauth") & filters.user(OWNER_ID))
async def list_authorized_users(_, message: Message):
    if not AUTHORIZED_USERS:
        return await message.reply_text("üì≠ **…¥·¥è ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥ús·¥á Äs Íú∞·¥è·¥ú…¥·¥Ö.**", quote=True)

    auth_list = "\n".join([f"‚Ä¢ `{uid}`" for uid in AUTHORIZED_USERS])
    await message.reply_text(
        f"üìã **·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥ús·¥á Äs:**\n\n{auth_list}", quote=True
    )
